import streamlit as st
import geopandas as gpd
import pandas as pd
import io, zipfile, tempfile
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
import contextily as ctx
from shapely.geometry import Polygon

st.set_page_config(page_title="Overlay Tapak Proyek", layout="wide")

st.title("üó∫Ô∏è Overlay Tapak Proyek dengan PIPPIB / Kawasan Hutan")

# --- Pilihan Dataset ---
overlay_option = st.radio(
    "Pilih dataset untuk overlay:",
    ("PIPPIB", "Kawasan Hutan"),
    horizontal=True
)

# --- Upload Shapefile Tapak ---
uploaded_zip = st.file_uploader("Upload file SHP Tapak Proyek (.zip)", type=["zip"])

def load_zipped_shp(uploaded_zip):
    """Membaca shapefile dari file zip upload Streamlit."""
    with tempfile.TemporaryDirectory() as tmpdir:
        with zipfile.ZipFile(uploaded_zip, "r") as zip_ref:
            zip_ref.extractall(tmpdir)
        shp_files = [f for f in zip_ref.namelist() if f.endswith(".shp")]
        if len(shp_files) == 0:
            return None
        shp_path = f"{tmpdir}/{shp_files[0]}"
        gdf = gpd.read_file(shp_path)
        return gdf

# --- Load dataset dasar (PIPPIB / Kawasan Hutan) ---
@st.cache_data
def load_reference_data(option):
    if option == "PIPPIB":
        gdf = gpd.read_file("data/pippib.shp")
    else:
        gdf = gpd.read_file("data/kawasan_hutan.shp")
    return gdf.to_crs(epsg=4326)

# --- Jika file diupload ---
if uploaded_zip is not None:
    gdf_tapak = load_zipped_shp(uploaded_zip)

    if gdf_tapak is not None:
        st.success("‚úÖ Shapefile Tapak berhasil dimuat.")
        gdf_tapak = gdf_tapak.to_crs(epsg=4326)

        # Muat dataset pembanding
        gdf_ref = load_reference_data(overlay_option)

        # --- Overlay ---
        gdf_overlap = gpd.overlay(gdf_tapak, gdf_ref, how="intersection")

        if not gdf_overlap.empty:
            gdf_overlap["luas_m2"] = gdf_overlap.geometry.area * (111_319.9 ** 2)
            total_luas = gdf_overlap["luas_m2"].sum()

            st.write(f"### Luas Overlap: {total_luas:,.2f} m¬≤")
            st.dataframe(gdf_overlap.drop(columns="geometry").head(10))

            # --- Preview Peta (folium) ---
            import folium
            from streamlit_folium import st_folium

            center = gdf_tapak.geometry.centroid.iloc[0].y, gdf_tapak.geometry.centroid.iloc[0].x
            m = folium.Map(location=center, zoom_start=12)
            folium.GeoJson(gdf_ref, name=overlay_option, style_function=lambda x: {
                "color": "green" if overlay_option == "Kawasan Hutan" else "blue",
                "fillOpacity": 0.1
            }).add_to(m)
            folium.GeoJson(gdf_tapak, name="Tapak Proyek", style_function=lambda x: {
                "color": "red", "fillOpacity": 0.4
            }).add_to(m)
            folium.LayerControl().add_to(m)
            st_folium(m, width=700, height=500)

            # --- Layout PNG (Matplotlib) ---
            st.markdown("### üì∑ Download Layout PNG")

            try:
                gdf_ref_3857 = gdf_ref.to_crs(epsg=3857)
                gdf_tapak_3857 = gdf_tapak.to_crs(epsg=3857)
                gdf_overlap_3857 = gdf_overlap.to_crs(epsg=3857)

                xmin, ymin, xmax, ymax = gdf_tapak_3857.total_bounds
                fig, ax = plt.subplots(figsize=(10, 10), dpi=150)

                # Plot layers
                color_ref = "blue" if overlay_option == "PIPPIB" else "green"
                gdf_ref_3857.plot(ax=ax, facecolor="none", edgecolor=color_ref, linewidth=1)
                gdf_tapak_3857.plot(ax=ax, facecolor="red", alpha=0.4)
                gdf_overlap_3857.plot(ax=ax, facecolor="yellow", alpha=0.5)

                ctx.add_basemap(ax, crs=gdf_tapak_3857.crs, source=ctx.providers.Esri.WorldImagery)

                ax.set_xlim(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)
                ax.set_ylim(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)
                ax.set_title(f"Peta Overlay Tapak Proyek dengan {overlay_option}", fontsize=14)
                ax.axis("off")

                # Legenda Dinamis
                legend_elements = [
                    mpatches.Patch(facecolor=color_ref, edgecolor=color_ref, alpha=0.3, label=overlay_option),
                    mpatches.Patch(facecolor="red", edgecolor="red", alpha=0.4, label="Tapak Proyek"),
                    mpatches.Patch(facecolor="yellow", edgecolor="yellow", alpha=0.5, label="Overlap Area")
                ]
                ax.legend(
                    handles=legend_elements,
                    loc="upper right",
                    fontsize=9,
                    frameon=True,
                    facecolor="white",
                    edgecolor="black",
                    title="Keterangan",
                    title_fontsize=9
                )

                buf = io.BytesIO()
                plt.savefig(buf, format="png", bbox_inches="tight", dpi=200)
                buf.seek(0)
                plt.close(fig)

                st.download_button(
                    "‚¨áÔ∏è Download Peta PNG",
                    data=buf,
                    file_name=f"Peta_Overlay_{overlay_option}.png",
                    mime="image/png"
                )
            except Exception as e:
                st.error(f"Gagal membuat peta: {e}")
        else:
            st.warning("‚ö†Ô∏è Tidak ada area yang tumpang tindih (overlap).")
    else:
        st.error("Gagal membaca file SHP dari ZIP.")
else:
    st.info("Silakan upload shapefile tapak proyek (.zip) terlebih dahulu.")
